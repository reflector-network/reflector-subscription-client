/**
 * Client for interaction with Reflector Subscriptions service
 */
export default class SubscriptionClient {
    /**
     * @param {ClientInitializationParams} params
     */
    constructor(params: ClientInitializationParams);

    /**
     * Create Reflector subscription with given parameters
     * @param {SubscriptionInitParams} params - Initialization parameters
     * @return {Promise<Subscription>}
     */
    createSubscription(params: SubscriptionInitParams): Promise<Subscription>;

    /**
     * Get subscription by ID
     * @param {SubscriptionId} subscriptionId
     * @return {Promise<Subscription>}
     */
    getSubscription(subscriptionId: SubscriptionId): Promise<Subscription>;

    /**
     * Deposit Reflector tokens to subscription balance
     * @param {SubscriptionId} subscriptionId - Subscription ID to top up
     * @param {string|bigint} amountToDeposit - Amount of tokens to deposit
     * @param {string} [from] - Optional account to transfer tokens from
     * @return {Promise}
     */
    deposit(subscriptionId: SubscriptionId, amountToDeposit: string | bigint, from?: string): Promise<void>;

    /**
     * Cancel active subscription and reimburse the balance to subscription owner account
     * @param {SubscriptionId} subscriptionId
     * @return {Promise}
     */
    cancel(subscriptionId: SubscriptionId): Promise<void>;

    /**
     * Retrieve Reflector token contract address
     * @return {Promise<string>}
     */
    getToken(): Promise<string>;

    /**
     * Get contract version
     * @return {Promise<number>}
     */
    getVersion(): Promise<number>;

    /**
     * Get base contract fee (amount charged from the account balance on the daily basis)
     * @return {Promise<number>}
     */
    getFee(): Promise<number>;
}

export type SubscriptionInitParams = {
    /**
     * Address of account that will own this subscription (by default equals to publicKey from initialization parameters)
     */
    owner?: string;
    /**
     * Base symbol
     */
    base: OracleSymbol;
    /**
     * Quote symbol
     */
    quote: OracleSymbol;
    /**
     * Price movement threshold that triggers subscription, in ‰
     */
    threshold: number;
    /**
     * Interval of periodic invocations, in minutes
     */
    heartbeat: number;
    /**
     * Webhook URL where trigger notifications will be POSTed, only HTTP and HTTPS protocols supported
     */
    webhook: string;
    /**
     * Initial subscription balance (should be at least 3x the daily fee)
     */
    initialBalance: bigint | string;
}

export class Subscription {
    /**
     * Unique subscription ID
     * @type {bigint}
     * @readonly
     */
    readonly id: bigint;
    /**
     * Current activity status
     * @type {SubscriptionStatus}
     * @readonly
     */
    readonly status: SubscriptionStatus;
    /**
     * Address of account that owns this subscription
     * @type {string}
     * @readonly
     */
    readonly owner: string;
    /**
     * Base symbol
     * @type {OracleSymbol}
     * @readonly
     */
    readonly base: OracleSymbol;
    /**
     * Quote symbol
     * @type {OracleSymbol}
     * @readonly
     */
    readonly quote: OracleSymbol;
    /**
     * Price movement threshold that triggers subscription, in ‰
     * @type {number}
     * @readonly
     */
    readonly threshold: number;
    /**
     * Interval of periodic invocations, in minutes
     * @type {number}
     * @readonly
     */
    readonly heartbeat: number;
    /**
     * Current outstanding subscription balance
     * @type {bigint}
     * @readonly
     */
    readonly balance: bigint;
    /**
     * Last updated timestamp
     * @type {Date}
     * @readonly
     */
    readonly updated: Date;
    /**
     * Webhook URL where trigger notifications get POSTed
     * @type {string}
     * @readonly
     */
    readonly webhook: string;
}

/**
 * Subscription identifier
 */
export type SubscriptionId = bigint | string;

/**
 * Price feed data source
 */
export type OracleDataSourceType = 'pubnet' | 'exchanges';

/**
 * Unique source/asset ticker identifier
 */
export type OracleSymbol = {
    /**
     * Asset ticker
     */
    asset: string;
    /**
     * Price feed contract address
     */
    source: OracleDataSourceType;
}

/**
 * Current subscription status
 */
export type SubscriptionStatus = 'active' | 'suspended';

/**
 * Callback for signing transactions generated by the client
 */
export type SignTransactionCallback = (tx: string, context: {
    network: string;
    networkPassphrase: string;
    accountToSign: string;
}) => Promise<string>

export type ClientInitializationParams = {
    /**
     * Public key of the account that will interact with the contract
     */
    publicKey: string,
    /**
     * Callback for signing transactions generated by the client
     */
    signTransaction: SignTransactionCallback,
    /**
     * URL of the RPC server
     */
    rpcUrl: string
}

/**
 * List tickers available for quotation in subscriptions
 * @param {OracleDataSourceType} source
 * @return {Promise<string[]>}
 */
export function getAvailableReflectorTickers(source: OracleDataSourceType): Promise<string[]>;