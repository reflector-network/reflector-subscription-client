{"version":3,"file":"subscriptions.js","mappings":"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","sources":["webpack://subscriptions/webpack/universalModuleDefinition","webpack://subscriptions/external umd \"@stellar/stellar-sdk\"","webpack://subscriptions/webpack/bootstrap","webpack://subscriptions/webpack/runtime/define property getters","webpack://subscriptions/webpack/runtime/hasOwnProperty shorthand","webpack://subscriptions/./src/types.js","webpack://subscriptions/./src/contract-client.js","webpack://subscriptions/./src/validation.js","webpack://subscriptions/./node_modules/.pnpm/@reflector+subscription-encryption@1.1.0/node_modules/@reflector/subscription-encryption/src/encryption.js","webpack://subscriptions/./src/client-settings.js","webpack://subscriptions/./src/webhook.js","webpack://subscriptions/./src/error-resolver.js","webpack://subscriptions/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stellar/stellar-sdk\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@stellar/stellar-sdk\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"subscriptions\"] = factory(require(\"@stellar/stellar-sdk\"));\n\telse\n\t\troot[\"subscriptions\"] = factory(root[\"@stellar/stellar-sdk\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__346__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__346__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {StrKey} from '@stellar/stellar-sdk'\r\n\r\nexport const ContractErrors = {\r\n    0: 'AlreadyInitialized',\r\n    1: 'Unauthorized',\r\n    2: 'SubscriptionNotFound',\r\n    3: 'NotInitialized',\r\n    4: 'InvalidAmount',\r\n    5: 'InvalidHeartbeat',\r\n    6: 'InvalidThreshold',\r\n    7: 'WebhookTooLong',\r\n    8: 'InvalidSubscriptionStatusError'\r\n}\r\n\r\n/**\r\n * @typedef {{}} OracleSymbol\r\n * @property {string} source - Price feed contract address\r\n * @property {string} symbol - Token symbol\r\n */\r\n\r\n/**\r\n * @typedef {bigint|string} SubscriptionId\r\n */\r\n\r\n/**\r\n * @typedef {'active'|'suspended'} SubscriptionStatus\r\n */\r\n\r\nexport class Subscription {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(id, props) {\r\n        this.id = id\r\n        this.status = props.status === 0 ? 'active' : 'suspended'\r\n        this.owner = props.owner\r\n        this.base = decodeOracleSymbol(props.base)\r\n        this.quote = decodeOracleSymbol(props.quote)\r\n        this.threshold = props.threshold\r\n        this.heartbeat = props.heartbeat\r\n        this.balance = props.balance\r\n        this.updated = new Date(Number(props.updated))\r\n    }\r\n\r\n    /**\r\n     * Unique subscription ID\r\n     * @type {bigint}\r\n     * @readonly\r\n     */\r\n    id\r\n    /**\r\n     * Current activity status\r\n     * @type {SubscriptionStatus}\r\n     * @readonly\r\n     */\r\n    status\r\n    /**\r\n     * Address of account that owns this subscription\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    owner\r\n    /**\r\n     * Base symbol\r\n     * @type {OracleSymbol}\r\n     * @readonly\r\n     */\r\n    base\r\n    /**\r\n     * Quote symbol\r\n     * @type {OracleSymbol}\r\n     * @readonly\r\n     */\r\n    quote\r\n    /**\r\n     * Price movement threshold that triggers subscription, in ‰\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    threshold\r\n    /**\r\n     * Interval of periodic invocations, in minutes\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    heartbeat\r\n    /**\r\n     * Webhook URL where trigger notifications get POSTed\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    webhook = '[encrypted]'\r\n    /**\r\n     * Current outstanding subscription balance\r\n     * @type {bigint}\r\n     * @readonly\r\n     */\r\n    balance\r\n    /**\r\n     * Last updated timestamp\r\n     * @type {Date}\r\n     * @readonly\r\n     */\r\n    updated\r\n}\r\n\r\n/**\r\n * @param {OracleSymbol} os\r\n * @internal\r\n */\r\nexport function formatOracleSymbol(os) {\r\n    //resolve symbol type\r\n    const symbolType = StrKey.isValidContract(os.symbol) ? 'Stellar' : 'Other'\r\n    const symbol = os.symbol\r\n    return {\r\n        asset: {\r\n            tag: symbolType,\r\n            values: [symbol]\r\n        },\r\n        source: os.source\r\n    }\r\n}\r\n\r\nfunction decodeOracleSymbol(os) {\r\n    let symbol = os.asset.values[0]\r\n    if (os.asset.tag === 'Stellar') {\r\n        symbol = StrKey.encodeContract(symbol)\r\n    }\r\n    return {\r\n        source: os.source,\r\n        symbol\r\n    }\r\n}","import {contract} from '@stellar/stellar-sdk'\r\n\r\nexport default class ContractClient extends contract.Client {\r\n    options\r\n\r\n    constructor(options) {\r\n        super(new contract.Spec([\"AAAAAgAAAAAAAAAAAAAABUFzc2V0AAAAAAAAAgAAAAEAAAAAAAAAB1N0ZWxsYXIAAAAAAQAAABMAAAABAAAAAAAAAAVPdGhlcgAAAAAAAAEAAAAR\",\r\n            \"AAAAAQAAAAAAAAAAAAAAC1RpY2tlckFzc2V0AAAAAAIAAAAAAAAABWFzc2V0AAAAAAAH0AAAAAVBc3NldAAAAAAAAAAAAAAGc291cmNlAAAAAAAQ\",\r\n            \"AAAAAQAAAAAAAAAAAAAADFN1YnNjcmlwdGlvbgAAAAkAAAAAAAAAB2JhbGFuY2UAAAAABgAAAAAAAAAEYmFzZQAAB9AAAAALVGlja2VyQXNzZXQAAAAAAAAAAAloZWFydGJlYXQAAAAAAAAEAAAAAAAAAAVvd25lcgAAAAAAABMAAAAAAAAABXF1b3RlAAAAAAAH0AAAAAtUaWNrZXJBc3NldAAAAAAAAAAABnN0YXR1cwAAAAAH0AAAABJTdWJzY3JpcHRpb25TdGF0dXMAAAAAAAAAAAAJdGhyZXNob2xkAAAAAAAABAAAAAAAAAAHdXBkYXRlZAAAAAAGAAAAAAAAAAd3ZWJob29rAAAAAA4=\",\r\n            \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAACQAAAAAAAAASQWxyZWFkeUluaXRpYWxpemVkAAAAAAAAAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAABAAAAAAAAABRTdWJzY3JpcHRpb25Ob3RGb3VuZAAAAAIAAAAAAAAADk5vdEluaXRpYWxpemVkAAAAAAADAAAAAAAAAA1JbnZhbGlkQW1vdW50AAAAAAAABAAAAAAAAAAQSW52YWxpZEhlYXJ0YmVhdAAAAAUAAAAAAAAAEEludmFsaWRUaHJlc2hvbGQAAAAGAAAAAAAAAA5XZWJob29rVG9vTG9uZwAAAAAABwAAAAAAAAAeSW52YWxpZFN1YnNjcmlwdGlvblN0YXR1c0Vycm9yAAAAAAAI\",\r\n            \"AAAAAQAAAAAAAAAAAAAADkNvbnRyYWN0Q29uZmlnAAAAAAADAAAAAAAAAAVhZG1pbgAAAAAAABMAAAAAAAAAA2ZlZQAAAAAGAAAAAAAAAAV0b2tlbgAAAAAAABM=\",\r\n            \"AAAAAQAAAAAAAAAAAAAAFlN1YnNjcmlwdGlvbkluaXRQYXJhbXMAAAAAAAYAAAAAAAAABGJhc2UAAAfQAAAAC1RpY2tlckFzc2V0AAAAAAAAAAAJaGVhcnRiZWF0AAAAAAAABAAAAAAAAAAFb3duZXIAAAAAAAATAAAAAAAAAAVxdW90ZQAAAAAAB9AAAAALVGlja2VyQXNzZXQAAAAAAAAAAAl0aHJlc2hvbGQAAAAAAAAEAAAAAAAAAAd3ZWJob29rAAAAAA4=\",\r\n            \"AAAAAwAAAAAAAAAAAAAAElN1YnNjcmlwdGlvblN0YXR1cwAAAAAAAgAAAAAAAAAGQWN0aXZlAAAAAAAAAAAAAAAAAAlTdXNwZW5kZWQAAAAAAAAB\",\r\n            \"AAAAAAAAAAAAAAAGY29uZmlnAAAAAAABAAAAAAAAAAZjb25maWcAAAAAB9AAAAAOQ29udHJhY3RDb25maWcAAAAAAAA=\",\r\n            \"AAAAAAAAAAAAAAAHc2V0X2ZlZQAAAAABAAAAAAAAAANmZWUAAAAABgAAAAA=\",\r\n            \"AAAAAAAAAAAAAAAHdHJpZ2dlcgAAAAACAAAAAAAAAAl0aW1lc3RhbXAAAAAAAAAGAAAAAAAAAAx0cmlnZ2VyX2hhc2gAAAPuAAAAIAAAAAA=\",\r\n            \"AAAAAAAAAAAAAAAPdXBkYXRlX2NvbnRyYWN0AAAAAAEAAAAAAAAACXdhc21faGFzaAAAAAAAA+4AAAAgAAAAAA==\",\r\n            \"AAAAAAAAAAAAAAAGY2hhcmdlAAAAAAABAAAAAAAAABBzdWJzY3JpcHRpb25faWRzAAAD6gAAAAYAAAAA\",\r\n            \"AAAAAAAAAAAAAAATY3JlYXRlX3N1YnNjcmlwdGlvbgAAAAACAAAAAAAAABBuZXdfc3Vic2NyaXB0aW9uAAAH0AAAABZTdWJzY3JpcHRpb25Jbml0UGFyYW1zAAAAAAAAAAAABmFtb3VudAAAAAAABgAAAAEAAAPtAAAAAgAAAAYAAAfQAAAADFN1YnNjcmlwdGlvbg==\",\r\n            \"AAAAAAAAAAAAAAAHZGVwb3NpdAAAAAADAAAAAAAAAARmcm9tAAAAEwAAAAAAAAAPc3Vic2NyaXB0aW9uX2lkAAAAAAYAAAAAAAAABmFtb3VudAAAAAAABgAAAAA=\",\r\n            \"AAAAAAAAAAAAAAAGY2FuY2VsAAAAAAABAAAAAAAAAA9zdWJzY3JpcHRpb25faWQAAAAABgAAAAA=\",\r\n            \"AAAAAAAAAAAAAAAQZ2V0X3N1YnNjcmlwdGlvbgAAAAEAAAAAAAAAD3N1YnNjcmlwdGlvbl9pZAAAAAAGAAAAAQAAB9AAAAAMU3Vic2NyaXB0aW9u\",\r\n            \"AAAAAAAAAAAAAAAHbGFzdF9pZAAAAAAAAAAAAQAAAAY=\",\r\n            \"AAAAAAAAAAAAAAAFYWRtaW4AAAAAAAAAAAAAAQAAA+gAAAAT\",\r\n            \"AAAAAAAAAAAAAAAHdmVyc2lvbgAAAAAAAAAAAQAAAAQ=\",\r\n            \"AAAAAAAAAAAAAAADZmVlAAAAAAAAAAABAAAABg==\",\r\n            \"AAAAAAAAAAAAAAAFdG9rZW4AAAAAAAAAAAAAAQAAABM=\"]), options)\r\n        this.options = options\r\n    }\r\n\r\n    fromJSON = {\r\n        config: (this.txFromJSON),\r\n        set_fee: (this.txFromJSON),\r\n        trigger: (this.txFromJSON),\r\n        update_contract: (this.txFromJSON),\r\n        charge: (this.txFromJSON),\r\n        create_subscription: (this.txFromJSON),\r\n        deposit: (this.txFromJSON),\r\n        cancel: (this.txFromJSON),\r\n        get_subscription: (this.txFromJSON),\r\n        admin: (this.txFromJSON),\r\n        version: (this.txFromJSON),\r\n        fee: (this.txFromJSON),\r\n        token: (this.txFromJSON)\r\n    }\r\n}","import {StrKey} from '@stellar/stellar-sdk'\r\n\r\nexport default {\r\n    validateRequired(value, paramName) {\r\n        if (!value)\r\n            throw new TypeError(`Parameter \"${paramName}\" is required`)\r\n        return value\r\n    },\r\n    validateNumber(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'number')\r\n            throw new TypeError(`Parameter \"${paramName}\" - number expected`)\r\n        return value\r\n    },\r\n    validateString(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'string' || !value.length)\r\n            throw new TypeError(`Parameter \"${paramName}\" - string expected`)\r\n        return value\r\n    },\r\n    validateBigint(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'bigint') {\r\n            try {\r\n                value = BigInt(value)\r\n            } catch (error) {\r\n                throw new Error(`Invalid \"${paramName}\" value`)\r\n            }\r\n        }\r\n        if (value <= 0n)\r\n            throw new Error(`Invalid \"${paramName}\" value`)\r\n        return value\r\n    },\r\n    validateOwner(owner) { //TODO: generalize\r\n        this.validateString(owner, 'owner')\r\n        if (!StrKey.isValidEd25519PublicKey(owner))\r\n            throw new TypeError('Invalid owner account address')\r\n        return owner\r\n    },\r\n    validateOracle(oracle) {\r\n        this.validateString(oracle, 'source')\r\n        if (!StrKey.isValidContract(oracle))\r\n            throw new TypeError('Invalid oracle contract address')\r\n        return oracle\r\n    },\r\n    validateBalance(amount, paramName) {\r\n        amount = this.validateBigint(amount, paramName)\r\n        return amount\r\n    },\r\n    validateOracleSymbol(oracleToken, paramName) {\r\n        this.validateRequired(oracleToken, paramName)\r\n        this.validateString(oracleToken.source, paramName + '.source')\r\n        this.validateString(oracleToken.symbol, paramName + '.symbol')\r\n        return oracleToken\r\n    },\r\n    validateThreshold(threshold) {\r\n        this.validateNumber(threshold, 'threshold')\r\n        if (threshold < 1)\r\n            throw new Error('Subscription threshold cannot be less than 1‰')\r\n        if (threshold > 10_000)\r\n            throw new Error('Subscription threshold cannot be greater than 10,000‰')\r\n        return Math.floor(threshold) //ensure u32\r\n    },\r\n    validateHeartbeat(heartbeat) {\r\n        this.validateNumber(heartbeat, 'heartbeat')\r\n        if (heartbeat < 5)\r\n            throw new Error('Subscription heartbeat cannot be less than 5 minutes')\r\n        if (heartbeat > 60)\r\n            throw new Error('Subscription heartbeat cannot be greater than 60 minutes')\r\n        return Math.floor(heartbeat) //ensure u32\r\n    },\r\n    validateWebhook(webhook) {\r\n        this.validateString(webhook, 'webhook')\r\n        if (!webhook.startsWith('https://') && !webhook.startsWith('http://'))\r\n            throw new TypeError('Only HTTP and HTTPS webhook URLs are supported')\r\n        if (webhook.length > 2000)\r\n            throw new TypeError('Webhook URL is too long')\r\n        return webhook\r\n    }\r\n}","const {subtle} = crypto\nconst publicExponent = new Uint8Array([1, 0, 1])\nconst textEncoder = new TextEncoder()\n\n/**\n * Generate random 32-byte encryption key\n * @return {Uint8Array}\n */\nfunction generateRandomEncryptionKey() {\n    return crypto.getRandomValues(new Uint8Array(32))\n}\n\n/**\n * Import binary RSA key as CryptoKey for encryption/decryption\n * @param {ArrayBuffer|Uint8Array|string} key - Raw RSA key in binary format\n * @return {Promise<CryptoKey>}\n */\nexport function importRSAKey(key) {\n    key = normalizeData(key)\n    let format = 'pkcs8'\n    let usage = 'decrypt'\n    if (key.length < 500) {//private keys are longer than public\n        format = 'spki'\n        usage = 'encrypt'\n    }\n    return subtle.importKey(\n        format,\n        key,\n        {name: 'RSA-OAEP', hash: 'SHA-256'},\n        true,\n        [usage]\n    )\n}\n\n/**\n * Import binary AES key as CryptoKey for encryption/decryption\n * @param {ArrayBuffer|Uint8Array|string} key - Raw AES key in binary format\n * @return {Promise<CryptoKey>}\n */\nfunction importAESKey(key) {\n    return subtle.importKey(\n        'raw',\n        normalizeData(key),\n        {name: 'AES-GCM'},\n        true,\n        ['encrypt', 'decrypt']\n    )\n}\n\n/**\n * Generate pair of keys for RSA-OAEP encryption\n * @return {Promise<{privateKey: ArrayBuffer, publicKey: ArrayBuffer}>}\n */\nexport async function generateRSAKeyPair() {\n    const keyPair = await crypto.subtle.generateKey(\n        {\n            name: 'RSA-OAEP',\n            modulusLength: 2048,\n            publicExponent,\n            hash: 'SHA-256'\n        },\n        true,\n        ['encrypt', 'decrypt']\n    )\n\n    const [privateKey, publicKey] = await Promise.all([\n        crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n        crypto.subtle.exportKey('spki', keyPair.publicKey)\n    ])\n\n    return {privateKey, publicKey}\n}\n\n/**\n * Get SHA256 hash of the data\n * @param {ArrayBuffer|Uint8Array|string} data - Data to hash\n * @returns {Promise<ArrayBuffer>}\n */\nexport function sha256(data) {\n    return crypto.subtle.digest('SHA-256', normalizeData(data))\n}\n\n/**\n * Encrypt the data with a public RSA key\n * @param {CryptoKey} rsaPublicKey - Public key for RSA encryption\n * @param {ArrayBuffer|Uint8Array|string} data - Data to encrypt\n * @return {Uint8Array}\n */\nexport async function encrypt(rsaPublicKey, data) {\n    //every time a new encryption key is generated\n    const aesKey = generateRandomEncryptionKey()\n    //encrypt data with AES\n    const iv = crypto.getRandomValues(new Uint8Array(12))\n    const encryptedData = await subtle.encrypt({name: 'AES-GCM', iv}, await importAESKey(aesKey), normalizeData(data))\n    //encrypt the key itself + IV with RSA\n    const aesKeyIV = new Uint8Array(44)\n    aesKeyIV.set(aesKey, 0)\n    aesKeyIV.set(iv, 32)\n    const encryptedAesKeyIv = await subtle.encrypt({name: 'RSA-OAEP'}, rsaPublicKey, aesKeyIV)\n    //concatenate both key and data\n    const res = new Uint8Array(256 + encryptedData.byteLength)\n    res.set(new Uint8Array(encryptedAesKeyIv), 0)\n    res.set(new Uint8Array(encryptedData), 256)\n    return res\n}\n\n/**\n * Decrypt the data with a private RSA key\n * @param {CryptoKey} rsaPrivateKey - Private key for RSA encryption\n * @param {ArrayBuffer|Uint8Array|string} encryptedData - Data to decrypt\n * @return {Promise<Uint8Array|null>}\n */\nexport async function decrypt(rsaPrivateKey, encryptedData) {\n    try {\n        //parse and validate input\n        encryptedData = normalizeData(encryptedData)\n        if (!encryptedData || encryptedData.length < 256)\n            return null\n        if (!rsaPrivateKey.algorithm) { //try to import\n            rsaPrivateKey = await importRSAKey(rsaPrivateKey)\n        }\n        //decode AES KEY\n        const aesKeyIV = new Uint8Array(await subtle.decrypt({name: 'RSA-OAEP'}, rsaPrivateKey, encryptedData.subarray(0, 256)))\n        //the rest of the input is the encrypted data itself\n        encryptedData = encryptedData.subarray(256)\n        const aesKey = await importAESKey(aesKeyIV.subarray(0, 32))\n        const res = await subtle.decrypt({name: 'AES-GCM', iv: aesKeyIV.subarray(32)}, aesKey, encryptedData)\n        return new Uint8Array(res)\n    } catch (e) {\n        console.error(e)\n        return null\n    }\n}\n\n/**\n * Normalize binary input data\n * @param {ArrayBuffer|Uint8Array|string} data - Binary data\n * @return {Uint8Array}\n * @internal\n */\nfunction normalizeData(data) {\n    if (typeof data === 'string')\n        return textEncoder.encode(data)\n    if (data instanceof ArrayBuffer)\n        return new Uint8Array(data)\n    return data\n}\nconst encryption = {encrypt, decrypt, sha256, generateRSAKeyPair, importRSAKey}\n\nexport default encryption","const clientSettings = {\r\n    publicEncryptionKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyGCtE3dNoq53CkG9D3JtJig5f15hQsjL8fogRZQmZJqbGax8uJEVYCfJmvC5Qe9uVFf9rD1TJLmB/qonYOMTph929opC400fWXGvOSPtTNTvAUTSzKqfMPWN4KjyAvMZkm0dWac9ZQer4fI1M4TUbc4xFMbvM4mL0JlZw6Bo04iVpwxznHwNAT3or1Akh2qrYHkZdhPhewQ9sfmfiTt4/mrGidsGKzvCFjZ1UElBK8M7VL9oM/6BCiCEHDFrLepiS9A7gbMn247UJub/6hgjNvkV203rDgMhORwkaljY+dAC9DWLX06D3lVYEVzeEK8uFcIDDyQ8wb/q6imLqR5bcwIDAQAB'\r\n}\r\n\r\nexport default clientSettings","import {encrypt, importRSAKey} from '@reflector/subscription-encryption'\r\nimport clientSettings from './client-settings.js'\r\n\r\nlet pk\r\n\r\n/**\r\n * Encrypt webhook URL\r\n * @param {string} webhookUrl - URL of the server endpoint that will be listening for the updates\r\n * @return {Promise<Uint8Array>}\r\n */\r\nexport async function encryptWebhookUrl(webhookUrl) {\r\n    if (!pk) {\r\n        pk = await importRSAKey(base64ToBytes(clientSettings.publicEncryptionKey))\r\n    }\r\n    return encrypt(pk, webhookUrl)\r\n}\r\n\r\nfunction base64ToBytes(base64) {\r\n    const binaryString = atob(base64)\r\n    const bytes = new Uint8Array(binaryString.length)\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i)\r\n    }\r\n    return bytes\r\n}","import {ContractErrors} from './types.js'\r\n\r\n/**\r\n * Handle simulation errors if any\r\n * @param {AssembledTransaction} tx\r\n * @internal\r\n */\r\nexport function processSimulationErrors(tx){\r\n    if (tx.simulation.error) {\r\n        const contractErrorMatch = /HostError: Error\\(Contract, #(\\d+)\\)/.exec(tx.simulation.error)\r\n        if (contractErrorMatch)\r\n            throw new Error('Contract execution error: ' + ContractErrors[contractErrorMatch[1]])\r\n        else\r\n            throw tx.simulation.error\r\n    }\r\n}","import {Networks, StrKey} from '@stellar/stellar-sdk'\r\nimport {formatOracleSymbol, Subscription} from './types.js'\r\nimport ContractClient from './contract-client.js'\r\nimport validation from './validation.js'\r\nimport {encryptWebhookUrl} from './webhook.js'\r\nimport {processSimulationErrors} from './error-resolver.js'\r\n\r\n/**\r\n * Client for interaction with Reflector Subscriptions service\r\n */\r\nexport default class SubscriptionClient {\r\n    /**\r\n     * @param {ClientInitializationParams} params\r\n     */\r\n    constructor(params) {\r\n        const options = {\r\n            publicKey: params.publicKey,\r\n            signTransaction: params.signTransaction,\r\n            rpcUrl: params.rpcUrl,\r\n            networkPassphrase: Networks.TESTNET,\r\n            contractId: params.contractId || 'CCPYWKODBPDCHCYJTQ3S5OSLXB6LAXQWN6FEOYUYMWXCX2ESYLHPAYMW'\r\n        }\r\n        this.client = new ContractClient(options)\r\n    }\r\n\r\n    /**\r\n     * @type {ContractClient}\r\n     * @private\r\n     */\r\n    client\r\n\r\n    /**\r\n     * Get subscription by ID\r\n     * @param {SubscriptionId} subscriptionId\r\n     * @return {Promise<Subscription>}\r\n     */\r\n    async getSubscription(subscriptionId) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        const res = await this.client.get_subscription({subscription_id: subscriptionId})\r\n        processSimulationErrors(res)\r\n        return new Subscription(subscriptionId, res.result)\r\n    }\r\n\r\n    /**\r\n     * Create Reflector subscription with given parameters\r\n     * @param {SubscriptionInitParams} params - Initialization parameters\r\n     * @return {Promise<Subscription>}\r\n     */\r\n    async createSubscription(params) {\r\n        let {owner = this.client.options.publicKey, base, quote, threshold, heartbeat, webhook, initialBalance} = params\r\n        //validate input\r\n        validation.validateOwner(owner)\r\n        validation.validateOracleSymbol(base, 'base')\r\n        validation.validateOracleSymbol(quote, 'quote')\r\n        if (base.source !== quote.source)\r\n            throw new Error('Cross-oracle subscriptions not supported')\r\n        threshold = validation.validateThreshold(threshold)\r\n        heartbeat = validation.validateHeartbeat(heartbeat)\r\n        validation.validateWebhook(webhook)\r\n        initialBalance = validation.validateBalance(initialBalance, 'initialBalance')\r\n        //encrypt webhook\r\n        const encryptedWebhook = await encryptWebhookUrl(webhook)\r\n        //build transaction\r\n        const tx = await this.client.create_subscription({\r\n            new_subscription: {\r\n                owner,\r\n                base: formatOracleSymbol(base),\r\n                quote: formatOracleSymbol(quote),\r\n                heartbeat,\r\n                threshold,\r\n                webhook: encryptedWebhook\r\n            },\r\n            amount: initialBalance\r\n        })\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n        return new Subscription(res.result[0], res.result[1])\r\n    }\r\n\r\n    /**\r\n     * Deposit Reflector tokens to subscription balance\r\n     * @param {SubscriptionId} subscriptionId - Subscription ID to top up\r\n     * @param {string|bigint} amountToDeposit - Amount of tokens to deposit\r\n     * @param {string} [from] - Optional account to transfer tokens from\r\n     * @return {Promise}\r\n     */\r\n    async deposit(subscriptionId, amountToDeposit, from) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        amountToDeposit = validation.validateBigint(amountToDeposit, 'amountToDeposit')\r\n        const tx = await this.client.deposit({\r\n            subscription_id: subscriptionId,\r\n            amount: amountToDeposit,\r\n            from\r\n        })\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n    }\r\n\r\n    /**\r\n     * Cancel active subscription and reimburse the balance to subscription owner account\r\n     * @param {SubscriptionId} subscriptionId\r\n     * @return {Promise}\r\n     */\r\n    async cancel(subscriptionId) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        const tx = await this.client.cancel({subscription_id: subscriptionId})\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n    }\r\n\r\n    /**\r\n     * Retrieve Reflector token contract address\r\n     * @return {Promise<string>}\r\n     */\r\n    async getToken() {\r\n        const tx = await this.client.token()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n\r\n    /**\r\n     * Get contract version\r\n     * @return {Promise<number>}\r\n     */\r\n    async getVersion() {\r\n        const tx = await this.client.version()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n\r\n    /**\r\n     * Get base contract fee (amount charged from the account balance on the daily basis)\r\n     * @return {Promise<number>}\r\n     */\r\n    async getFee() {\r\n        const tx = await this.client.version()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {{}} ClientInitializationParams\r\n * @property {string} publicKey - Public key of the account that will interact with the contract\r\n * @property {SignTransactionCallback} signTransaction - Callback for signing transactions generated by the client\r\n * @property {string} rpcUrl - URL of the RPC server\r\n */\r\n\r\n/**\r\n * @typedef {Object} SubscriptionInitParams\r\n * @property {string} [owner] - Address of account that will own this subscription (by default equals to publicKey from initialization parameters)\r\n * @property {OracleSymbol} base - Base symbol\r\n * @property {OracleSymbol} quote - Quote symbol\r\n * @property {number} threshold - Price movement threshold that triggers subscription, in ‰\r\n * @property {number} heartbeat - Interval of periodic invocations, in minutes\r\n * @property {string} webhook - Webhook URL where trigger notifications will be POSTed, only HTTP and HTTPS protocols supported\r\n * @property {bigint|string} initialBalance - Initial subscription balance (should be at least 3x the daily fee)\r\n */\r\n\r\n/**\r\n * @callback SignTransactionCallback\r\n * @param {string} tx - Transaction XDR to sign\r\n * @param {{network: string, networkPassphrase: string, accountToSign: string}} context - Signing context\r\n * @return {Promise<string>} - Signed transaction XDR\r\n */"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__346__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ContractErrors","Subscription","constructor","id","props","status","owner","base","decodeOracleSymbol","quote","threshold","heartbeat","balance","updated","Date","Number","webhook","formatOracleSymbol","os","asset","tag","StrKey","isValidContract","symbol","values","source","encodeContract","ContractClient","contract","Client","options","super","Spec","fromJSON","config","txFromJSON","set_fee","trigger","update_contract","charge","create_subscription","deposit","cancel","get_subscription","admin","version","fee","token","validateRequired","value","paramName","TypeError","validateNumber","validateString","length","validateBigint","BigInt","error","Error","validateOwner","isValidEd25519PublicKey","validateOracle","oracle","validateBalance","amount","validateOracleSymbol","oracleToken","validateThreshold","Math","floor","validateHeartbeat","validateWebhook","startsWith","subtle","crypto","textEncoder","Uint8Array","TextEncoder","async","encrypt","rsaPublicKey","data","aesKey","getRandomValues","iv","encryptedData","name","importKey","normalizeData","aesKeyIV","set","encryptedAesKeyIv","res","byteLength","encode","ArrayBuffer","pk","encryptWebhookUrl","webhookUrl","format","usage","hash","importRSAKey","base64","binaryString","atob","bytes","i","charCodeAt","base64ToBytes","clientSettings","processSimulationErrors","tx","simulation","contractErrorMatch","exec","SubscriptionClient","params","publicKey","signTransaction","rpcUrl","networkPassphrase","Networks","TESTNET","contractId","client","getSubscription","subscriptionId","validation","subscription_id","result","createSubscription","initialBalance","encryptedWebhook","new_subscription","signAndSend","amountToDeposit","from","getToken","getVersion","getFee"],"sourceRoot":""}