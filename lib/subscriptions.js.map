{"version":3,"file":"subscriptions.js","mappings":"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","sources":["webpack://subscriptions/webpack/universalModuleDefinition","webpack://subscriptions/external umd \"@stellar/stellar-sdk\"","webpack://subscriptions/webpack/bootstrap","webpack://subscriptions/webpack/runtime/define property getters","webpack://subscriptions/webpack/runtime/hasOwnProperty shorthand","webpack://subscriptions/./src/types.js","webpack://subscriptions/./src/contract-client.js","webpack://subscriptions/./src/validation.js","webpack://subscriptions/./node_modules/.pnpm/@reflector+subscription-encryption@1.1.0/node_modules/@reflector/subscription-encryption/src/encryption.js","webpack://subscriptions/./src/webhook.js","webpack://subscriptions/./src/error-resolver.js","webpack://subscriptions/./src/client-settings.js","webpack://subscriptions/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stellar/stellar-sdk\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@stellar/stellar-sdk\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"subscriptions\"] = factory(require(\"@stellar/stellar-sdk\"));\n\telse\n\t\troot[\"subscriptions\"] = factory(root[\"@stellar/stellar-sdk\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__346__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__346__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const ContractErrors = {\r\n    0: 'Contract has been already initialized', //'AlreadyInitialized',\r\n    1: 'This account is not the owner of the subscription', //'Unauthorized',\r\n    2: 'Subscription was not found', //'SubscriptionNotFound',\r\n    3: 'Account has not been initialized yet', //'NotInitialized',\r\n    4: 'Insufficient deposit amount', //'InvalidAmount',\r\n    5: 'Invalid heartbeat value', //'InvalidHeartbeat',\r\n    6: 'Invalid threshold value', //'InvalidThreshold',\r\n    7: 'Encoded webhook value is too long', //'WebhookTooLong',\r\n    8: 'Subscription has been suspended' //'InvalidSubscriptionStatusError'\r\n}\r\n\r\n/**\r\n * @typedef {{}} OracleSymbol - Unique asset ticker identifier\r\n * @property {string} source - Price feed contract address\r\n * @property {string} asset - Asset ticker\r\n */\r\n\r\n/**\r\n * @typedef {bigint|string} SubscriptionId - Subscription identifier\r\n */\r\n\r\n/**\r\n * @typedef {'active'|'suspended'} SubscriptionStatus - Current subscription status\r\n */\r\n\r\nexport class Subscription {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(id, props) {\r\n        this.id = id\r\n        this.status = props.status === 0 ? 'active' : 'suspended'\r\n        this.owner = props.owner\r\n        this.base = props.base\r\n        this.quote = props.quote\r\n        this.threshold = props.threshold\r\n        this.heartbeat = props.heartbeat\r\n        this.balance = props.balance\r\n        this.updated = new Date(Number(props.updated))\r\n    }\r\n\r\n    /**\r\n     * Unique subscription ID\r\n     * @type {bigint}\r\n     * @readonly\r\n     */\r\n    id\r\n    /**\r\n     * Current activity status\r\n     * @type {SubscriptionStatus}\r\n     * @readonly\r\n     */\r\n    status\r\n    /**\r\n     * Address of account that owns this subscription\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    owner\r\n    /**\r\n     * Base symbol\r\n     * @type {OracleSymbol}\r\n     * @readonly\r\n     */\r\n    base\r\n    /**\r\n     * Quote symbol\r\n     * @type {OracleSymbol}\r\n     * @readonly\r\n     */\r\n    quote\r\n    /**\r\n     * Price movement threshold that triggers subscription, in ‰\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    threshold\r\n    /**\r\n     * Interval of periodic invocations, in minutes\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    heartbeat\r\n    /**\r\n     * Webhook URL where trigger notifications get POSTed\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    webhook = '[encrypted]'\r\n    /**\r\n     * Current outstanding subscription balance\r\n     * @type {bigint}\r\n     * @readonly\r\n     */\r\n    balance\r\n    /**\r\n     * Last updated timestamp\r\n     * @type {Date}\r\n     * @readonly\r\n     */\r\n    updated\r\n}","import {contract} from '@stellar/stellar-sdk'\r\n\r\nexport default class ContractClient extends contract.Client {\r\n    options\r\n\r\n    constructor(options) {\r\n        super(new contract.Spec([\r\n            'AAAAAQAAAAAAAAAAAAAAC1RpY2tlckFzc2V0AAAAAAIAAAAAAAAABWFzc2V0AAAAAAAAEAAAAAAAAAAGc291cmNlAAAAAAAQ',\r\n            'AAAAAQAAAAAAAAAAAAAADFN1YnNjcmlwdGlvbgAAAAkAAAAAAAAAB2JhbGFuY2UAAAAABgAAAAAAAAAEYmFzZQAAB9AAAAALVGlja2VyQXNzZXQAAAAAAAAAAAloZWFydGJlYXQAAAAAAAAEAAAAAAAAAAVvd25lcgAAAAAAABMAAAAAAAAABXF1b3RlAAAAAAAH0AAAAAtUaWNrZXJBc3NldAAAAAAAAAAABnN0YXR1cwAAAAAH0AAAABJTdWJzY3JpcHRpb25TdGF0dXMAAAAAAAAAAAAJdGhyZXNob2xkAAAAAAAABAAAAAAAAAAHdXBkYXRlZAAAAAAGAAAAAAAAAAd3ZWJob29rAAAAAA4=',\r\n            'AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAACQAAAAAAAAASQWxyZWFkeUluaXRpYWxpemVkAAAAAAAAAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAABAAAAAAAAABRTdWJzY3JpcHRpb25Ob3RGb3VuZAAAAAIAAAAAAAAADk5vdEluaXRpYWxpemVkAAAAAAADAAAAAAAAAA1JbnZhbGlkQW1vdW50AAAAAAAABAAAAAAAAAAQSW52YWxpZEhlYXJ0YmVhdAAAAAUAAAAAAAAAEEludmFsaWRUaHJlc2hvbGQAAAAGAAAAAAAAAA5XZWJob29rVG9vTG9uZwAAAAAABwAAAAAAAAAeSW52YWxpZFN1YnNjcmlwdGlvblN0YXR1c0Vycm9yAAAAAAAI',\r\n            'AAAAAQAAAAAAAAAAAAAAFlN1YnNjcmlwdGlvbkluaXRQYXJhbXMAAAAAAAYAAAAAAAAABGJhc2UAAAfQAAAAC1RpY2tlckFzc2V0AAAAAAAAAAAJaGVhcnRiZWF0AAAAAAAABAAAAAAAAAAFb3duZXIAAAAAAAATAAAAAAAAAAVxdW90ZQAAAAAAB9AAAAALVGlja2VyQXNzZXQAAAAAAAAAAAl0aHJlc2hvbGQAAAAAAAAEAAAAAAAAAAd3ZWJob29rAAAAAA4=',\r\n            'AAAAAwAAAAAAAAAAAAAAElN1YnNjcmlwdGlvblN0YXR1cwAAAAAAAgAAAAAAAAAGQWN0aXZlAAAAAAAAAAAAAAAAAAlTdXNwZW5kZWQAAAAAAAAB',\r\n            'AAAAAAAAAAAAAAATY3JlYXRlX3N1YnNjcmlwdGlvbgAAAAACAAAAAAAAABBuZXdfc3Vic2NyaXB0aW9uAAAH0AAAABZTdWJzY3JpcHRpb25Jbml0UGFyYW1zAAAAAAAAAAAABmFtb3VudAAAAAAABgAAAAEAAAPtAAAAAgAAAAYAAAfQAAAADFN1YnNjcmlwdGlvbg==',\r\n            'AAAAAAAAAAAAAAAHZGVwb3NpdAAAAAADAAAAAAAAAARmcm9tAAAAEwAAAAAAAAAPc3Vic2NyaXB0aW9uX2lkAAAAAAYAAAAAAAAABmFtb3VudAAAAAAABgAAAAA=',\r\n            'AAAAAAAAAAAAAAAGY2FuY2VsAAAAAAABAAAAAAAAAA9zdWJzY3JpcHRpb25faWQAAAAABgAAAAA=',\r\n            'AAAAAAAAAAAAAAAQZ2V0X3N1YnNjcmlwdGlvbgAAAAEAAAAAAAAAD3N1YnNjcmlwdGlvbl9pZAAAAAAGAAAAAQAAB9AAAAAMU3Vic2NyaXB0aW9u',\r\n            'AAAAAAAAAAAAAAARZ2V0X3JldGVudGlvbl9mZWUAAAAAAAABAAAAAAAAAA9zdWJzY3JpcHRpb25faWQAAAAABgAAAAEAAAAG',\r\n            'AAAAAAAAAAAAAAAHdmVyc2lvbgAAAAAAAAAAAQAAAAQ=',\r\n            'AAAAAAAAAAAAAAADZmVlAAAAAAAAAAABAAAABg==',\r\n            'AAAAAAAAAAAAAAAFdG9rZW4AAAAAAAAAAAAAAQAAABM='\r\n        ]), options)\r\n        this.options = options\r\n    }\r\n\r\n    fromJSON = {\r\n        create_subscription: (this.txFromJSON),\r\n        deposit: (this.txFromJSON),\r\n        cancel: (this.txFromJSON),\r\n        get_subscription: (this.txFromJSON),\r\n        get_retention_fee: (this.txFromJSON),\r\n        version: (this.txFromJSON),\r\n        last_id: (this.txFromJSON),\r\n        fee: (this.txFromJSON),\r\n        token: (this.txFromJSON)\r\n    }\r\n}","import {StrKey} from '@stellar/stellar-sdk'\r\n\r\nexport default {\r\n    validateRequired(value, paramName) {\r\n        if (!value)\r\n            throw new TypeError(`Parameter \"${paramName}\" is required`)\r\n        return value\r\n    },\r\n    validateNumber(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'number')\r\n            throw new TypeError(`Parameter \"${paramName}\" - number expected`)\r\n        return value\r\n    },\r\n    validateString(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'string' || !value.length)\r\n            throw new TypeError(`Parameter \"${paramName}\" - string expected`)\r\n        return value\r\n    },\r\n    validateBigint(value, paramName) {\r\n        this.validateRequired(value, paramName)\r\n        if (typeof value !== 'bigint') {\r\n            try {\r\n                value = BigInt(value)\r\n            } catch (error) {\r\n                throw new Error(`Invalid \"${paramName}\" value`)\r\n            }\r\n        }\r\n        if (value <= 0n)\r\n            throw new Error(`Invalid \"${paramName}\" value`)\r\n        return value\r\n    },\r\n    validateAccount(account, paramName) {\r\n        this.validateString(account, paramName)\r\n        if (!StrKey.isValidEd25519PublicKey(account))\r\n            throw new TypeError(`Invalid \"${paramName}\" account address`)\r\n        return account\r\n    },\r\n    validateBalance(amount, paramName) {\r\n        amount = this.validateBigint(amount, paramName)\r\n        return amount\r\n    },\r\n    validateOracleSymbol(oracleToken, paramName) {\r\n        this.validateRequired(oracleToken, paramName)\r\n        this.validateString(oracleToken.source, paramName + '.source')\r\n        this.validateString(oracleToken.asset, paramName + '.asset')\r\n        return oracleToken\r\n    },\r\n    validateThreshold(threshold) {\r\n        this.validateNumber(threshold, 'threshold')\r\n        if (threshold < 1)\r\n            throw new Error('Subscription threshold cannot be less than 1‰')\r\n        if (threshold > 10_000)\r\n            throw new Error('Subscription threshold cannot be greater than 10,000‰')\r\n        return Math.floor(threshold) //ensure u32\r\n    },\r\n    validateHeartbeat(heartbeat) {\r\n        this.validateNumber(heartbeat, 'heartbeat')\r\n        if (heartbeat < 5)\r\n            throw new Error('Subscription heartbeat cannot be less than 5 minutes')\r\n        if (heartbeat > 240)\r\n            throw new Error('Subscription heartbeat cannot be greater than 240 minutes')\r\n        return Math.floor(heartbeat) //ensure u32\r\n    },\r\n    validateWebhook(webhook) {\r\n        this.validateString(webhook, 'webhook')\r\n        if (!webhook.startsWith('https://') && !webhook.startsWith('http://'))\r\n            throw new TypeError('Only HTTP and HTTPS webhook URLs are supported')\r\n        if (webhook.length > 2000)\r\n            throw new TypeError('Webhook URL is too long')\r\n        return webhook\r\n    }\r\n}","const {subtle} = crypto\nconst publicExponent = new Uint8Array([1, 0, 1])\nconst textEncoder = new TextEncoder()\n\n/**\n * Generate random 32-byte encryption key\n * @return {Uint8Array}\n */\nfunction generateRandomEncryptionKey() {\n    return crypto.getRandomValues(new Uint8Array(32))\n}\n\n/**\n * Import binary RSA key as CryptoKey for encryption/decryption\n * @param {ArrayBuffer|Uint8Array|string} key - Raw RSA key in binary format\n * @return {Promise<CryptoKey>}\n */\nexport function importRSAKey(key) {\n    key = normalizeData(key)\n    let format = 'pkcs8'\n    let usage = 'decrypt'\n    if (key.length < 500) {//private keys are longer than public\n        format = 'spki'\n        usage = 'encrypt'\n    }\n    return subtle.importKey(\n        format,\n        key,\n        {name: 'RSA-OAEP', hash: 'SHA-256'},\n        true,\n        [usage]\n    )\n}\n\n/**\n * Import binary AES key as CryptoKey for encryption/decryption\n * @param {ArrayBuffer|Uint8Array|string} key - Raw AES key in binary format\n * @return {Promise<CryptoKey>}\n */\nfunction importAESKey(key) {\n    return subtle.importKey(\n        'raw',\n        normalizeData(key),\n        {name: 'AES-GCM'},\n        true,\n        ['encrypt', 'decrypt']\n    )\n}\n\n/**\n * Generate pair of keys for RSA-OAEP encryption\n * @return {Promise<{privateKey: ArrayBuffer, publicKey: ArrayBuffer}>}\n */\nexport async function generateRSAKeyPair() {\n    const keyPair = await crypto.subtle.generateKey(\n        {\n            name: 'RSA-OAEP',\n            modulusLength: 2048,\n            publicExponent,\n            hash: 'SHA-256'\n        },\n        true,\n        ['encrypt', 'decrypt']\n    )\n\n    const [privateKey, publicKey] = await Promise.all([\n        crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n        crypto.subtle.exportKey('spki', keyPair.publicKey)\n    ])\n\n    return {privateKey, publicKey}\n}\n\n/**\n * Get SHA256 hash of the data\n * @param {ArrayBuffer|Uint8Array|string} data - Data to hash\n * @returns {Promise<ArrayBuffer>}\n */\nexport function sha256(data) {\n    return crypto.subtle.digest('SHA-256', normalizeData(data))\n}\n\n/**\n * Encrypt the data with a public RSA key\n * @param {CryptoKey} rsaPublicKey - Public key for RSA encryption\n * @param {ArrayBuffer|Uint8Array|string} data - Data to encrypt\n * @return {Uint8Array}\n */\nexport async function encrypt(rsaPublicKey, data) {\n    //every time a new encryption key is generated\n    const aesKey = generateRandomEncryptionKey()\n    //encrypt data with AES\n    const iv = crypto.getRandomValues(new Uint8Array(12))\n    const encryptedData = await subtle.encrypt({name: 'AES-GCM', iv}, await importAESKey(aesKey), normalizeData(data))\n    //encrypt the key itself + IV with RSA\n    const aesKeyIV = new Uint8Array(44)\n    aesKeyIV.set(aesKey, 0)\n    aesKeyIV.set(iv, 32)\n    const encryptedAesKeyIv = await subtle.encrypt({name: 'RSA-OAEP'}, rsaPublicKey, aesKeyIV)\n    //concatenate both key and data\n    const res = new Uint8Array(256 + encryptedData.byteLength)\n    res.set(new Uint8Array(encryptedAesKeyIv), 0)\n    res.set(new Uint8Array(encryptedData), 256)\n    return res\n}\n\n/**\n * Decrypt the data with a private RSA key\n * @param {CryptoKey} rsaPrivateKey - Private key for RSA encryption\n * @param {ArrayBuffer|Uint8Array|string} encryptedData - Data to decrypt\n * @return {Promise<Uint8Array|null>}\n */\nexport async function decrypt(rsaPrivateKey, encryptedData) {\n    try {\n        //parse and validate input\n        encryptedData = normalizeData(encryptedData)\n        if (!encryptedData || encryptedData.length < 256)\n            return null\n        if (!rsaPrivateKey.algorithm) { //try to import\n            rsaPrivateKey = await importRSAKey(rsaPrivateKey)\n        }\n        //decode AES KEY\n        const aesKeyIV = new Uint8Array(await subtle.decrypt({name: 'RSA-OAEP'}, rsaPrivateKey, encryptedData.subarray(0, 256)))\n        //the rest of the input is the encrypted data itself\n        encryptedData = encryptedData.subarray(256)\n        const aesKey = await importAESKey(aesKeyIV.subarray(0, 32))\n        const res = await subtle.decrypt({name: 'AES-GCM', iv: aesKeyIV.subarray(32)}, aesKey, encryptedData)\n        return new Uint8Array(res)\n    } catch (e) {\n        console.error(e)\n        return null\n    }\n}\n\n/**\n * Normalize binary input data\n * @param {ArrayBuffer|Uint8Array|string} data - Binary data\n * @return {Uint8Array}\n * @internal\n */\nfunction normalizeData(data) {\n    if (typeof data === 'string')\n        return textEncoder.encode(data)\n    if (data instanceof ArrayBuffer)\n        return new Uint8Array(data)\n    return data\n}\nconst encryption = {encrypt, decrypt, sha256, generateRSAKeyPair, importRSAKey}\n\nexport default encryption","import {encrypt, importRSAKey} from '@reflector/subscription-encryption'\r\n\r\nlet pk\r\n\r\n/**\r\n * Encrypt webhook URL\r\n * @param {string} webhookUrl - URL of the server endpoint that will be listening for the updates\r\n * @param {string} publicEncryptionKey - Public key used for webhook encryption\r\n * @return {Promise<Uint8Array>}\r\n */\r\nexport async function encryptWebhookUrl(webhookUrl, publicEncryptionKey) {\r\n    if (!pk) {\r\n        pk = await importRSAKey(base64ToBytes(publicEncryptionKey))\r\n    }\r\n    return encrypt(pk, webhookUrl)\r\n}\r\n\r\nfunction base64ToBytes(base64) {\r\n    const binaryString = atob(base64)\r\n    const bytes = new Uint8Array(binaryString.length)\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i)\r\n    }\r\n    return bytes\r\n}","import {ContractErrors} from './types.js'\r\n\r\n/**\r\n * Handle simulation errors if any\r\n * @param {AssembledTransaction} tx\r\n * @internal\r\n */\r\nexport function processSimulationErrors(tx){\r\n    if (tx.simulation.error) {\r\n        const contractErrorMatch = /HostError: Error\\(Contract, #(\\d+)\\)/.exec(tx.simulation.error)\r\n        if (contractErrorMatch)\r\n            throw new Error('Contract execution error: ' + ContractErrors[contractErrorMatch[1]])\r\n        else\r\n            throw tx.simulation.error\r\n    }\r\n}","const clientSettings = {\r\n    publicEncryptionKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj7uIWOm8DPs/0+vatk9diJHZAbwy7BB2DTWEP6jPMkYCfpdls5+AO4bMR3arAPaHqnoUFhQrrvjiItXxZTTgvSIesm2Rc1GVdcNYk+3tVc04jxloXr3vXXoE8RvnpjwbM7S/8KWh8o9MS7D69/RixcUyLvX06WNpoLIIhYhtHOLZ7rxmV0HfLbY4yYYGxzKeDhukUpr9zqwRxn/laEkp4S1b6MQIAOpIuUchuzQkpvoYeHssc+KFn4CXxXkkjMBAasoJCe8ifOUIm4YSERXLfX38upS1cUXDoOo0dlx8qn/I0o96Ga626uiOkBavhuYQDc8r/8DkLw+JDVvJgbR1RwIDAQAB'\r\n}\r\n\r\nexport default clientSettings","import {Networks} from '@stellar/stellar-sdk'\r\nimport {Subscription} from './types.js'\r\nimport ContractClient from './contract-client.js'\r\nimport validation from './validation.js'\r\nimport {encryptWebhookUrl} from './webhook.js'\r\nimport {processSimulationErrors} from './error-resolver.js'\r\nimport clientSettings from './client-settings.js'\r\n\r\n/**\r\n * Client for interaction with Reflector Subscriptions service\r\n */\r\nexport default class SubscriptionClient {\r\n    /**\r\n     * @param {ClientInitializationParams} params\r\n     */\r\n    constructor(params) {\r\n        const options = {\r\n            publicKey: params.publicKey,\r\n            signTransaction: params.signTransaction,\r\n            rpcUrl: params.rpcUrl,\r\n            networkPassphrase: params.networkPassphrase || Networks.PUBLIC,\r\n            contractId: params.contractId || 'CBNGTWIVRCD4FOJ24FGAKI6I5SDAXI7A4GWKSQS7E6UYSR4E4OHRI2JX'\r\n        }\r\n        this.publicEncryptionKey = params.publicEncryptionKey || clientSettings.publicEncryptionKey\r\n        this.client = new ContractClient(options)\r\n    }\r\n\r\n    /**\r\n     * @type {ContractClient}\r\n     * @private\r\n     */\r\n    client\r\n\r\n    /**\r\n     * Get subscription by ID\r\n     * @param {SubscriptionId} subscriptionId\r\n     * @return {Promise<Subscription>}\r\n     */\r\n    async getSubscription(subscriptionId) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        const res = await this.client.get_subscription({subscription_id: subscriptionId})\r\n        processSimulationErrors(res)\r\n        return new Subscription(subscriptionId, res.result)\r\n    }\r\n\r\n    /**\r\n     * Create Reflector subscription with given parameters\r\n     * @param {SubscriptionInitParams} params - Initialization parameters\r\n     * @return {Promise<Subscription>}\r\n     */\r\n    async createSubscription(params) {\r\n        let {owner = this.client.options.publicKey, base, quote, threshold, heartbeat, webhook, initialBalance} = params\r\n        //validate input\r\n        validation.validateAccount(owner, 'owner')\r\n        validation.validateOracleSymbol(base, 'base')\r\n        validation.validateOracleSymbol(quote, 'quote')\r\n        threshold = validation.validateThreshold(threshold)\r\n        heartbeat = validation.validateHeartbeat(heartbeat)\r\n        validation.validateWebhook(webhook)\r\n        initialBalance = validation.validateBalance(initialBalance, 'initialBalance')\r\n        //encrypt webhook\r\n        const encryptedWebhook = await encryptWebhookUrl(webhook, this.publicEncryptionKey)\r\n        //build transaction\r\n        const tx = await this.client.create_subscription({\r\n            new_subscription: {\r\n                owner,\r\n                base,\r\n                quote,\r\n                heartbeat,\r\n                threshold,\r\n                webhook: encryptedWebhook\r\n            },\r\n            amount: initialBalance\r\n        })\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n        return new Subscription(res.result[0], res.result[1])\r\n    }\r\n\r\n    /**\r\n     * Deposit Reflector tokens to subscription balance\r\n     * @param {SubscriptionId} subscriptionId - Subscription ID to top up\r\n     * @param {string|bigint} amountToDeposit - Amount of tokens to deposit\r\n     * @param {string} from - Account to transfer tokens from\r\n     * @return {Promise}\r\n     */\r\n    async deposit(subscriptionId, amountToDeposit, from) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        amountToDeposit = validation.validateBigint(amountToDeposit, 'amountToDeposit')\r\n        validation.validateAccount(from, 'from')\r\n        const tx = await this.client.deposit({\r\n            subscription_id: subscriptionId,\r\n            amount: amountToDeposit,\r\n            from\r\n        })\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n    }\r\n\r\n    /**\r\n     * Cancel active subscription and reimburse the balance to subscription owner account\r\n     * @param {SubscriptionId} subscriptionId\r\n     * @return {Promise}\r\n     */\r\n    async cancel(subscriptionId) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        const tx = await this.client.cancel({subscription_id: subscriptionId})\r\n        processSimulationErrors(tx)\r\n        const res = await tx.signAndSend()\r\n    }\r\n\r\n    /**\r\n     * Calculate daily subscription retention fee\r\n     * @param {SubscriptionId} subscriptionId\r\n     * @return {Promise<bigint>}\r\n     */\r\n    async getRetentionFee(subscriptionId) {\r\n        subscriptionId = validation.validateBigint(subscriptionId, 'subscriptionId')\r\n        const res = await this.client.get_retention_fee({subscription_id: subscriptionId})\r\n        processSimulationErrors(res)\r\n        return res.result\r\n    }\r\n\r\n    /**\r\n     * Retrieve Reflector token contract address\r\n     * @return {Promise<string>}\r\n     */\r\n    async getToken() {\r\n        const tx = await this.client.token()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n\r\n    /**\r\n     * Get contract version\r\n     * @return {Promise<number>}\r\n     */\r\n    async getVersion() {\r\n        const tx = await this.client.version()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n\r\n    /**\r\n     * Get base contract fee (used to calculate amounts charged from the account balance on the daily basis)\r\n     * @return {Promise<number>}\r\n     */\r\n    async getFee() {\r\n        const tx = await this.client.fee()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n\r\n    /**\r\n     * Retrieve Reflector token contract address\r\n     * @return {Promise<bigint>}\r\n     */\r\n    async getLastId() {\r\n        const tx = await this.client.last_id()\r\n        processSimulationErrors(tx)\r\n        return tx.result\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {{}} ClientInitializationParams\r\n * @property {string} publicKey - Public key of the account that will interact with the contract\r\n * @property {SignTransactionCallback} signTransaction - Callback for signing transactions generated by the client\r\n * @property {string} rpcUrl - URL of the RPC server\r\n */\r\n\r\n/**\r\n * @typedef {Object} SubscriptionInitParams\r\n * @property {string} [owner] - Address of account that will own this subscription (by default equals to publicKey from initialization parameters)\r\n * @property {OracleSymbol} base - Base symbol\r\n * @property {OracleSymbol} quote - Quote symbol\r\n * @property {number} threshold - Price movement threshold that triggers subscription, in ‰\r\n * @property {number} heartbeat - Interval of periodic invocations, in minutes\r\n * @property {string} webhook - Webhook URL where trigger notifications will be POSTed, only HTTP and HTTPS protocols supported\r\n * @property {bigint|string} initialBalance - Initial subscription balance (should be at least 3x the daily fee)\r\n */\r\n\r\n/**\r\n * @callback SignTransactionCallback - Callback for signing transactions generated by the client\r\n * @param {string} tx - Transaction XDR to sign\r\n * @param {{network: string, networkPassphrase: string, accountToSign: string}} context - Signing context\r\n * @return {Promise<string>} - Signed transaction XDR\r\n */"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__346__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ContractErrors","Subscription","constructor","id","props","status","owner","base","quote","threshold","heartbeat","balance","updated","Date","Number","webhook","ContractClient","contract","Client","options","super","Spec","fromJSON","create_subscription","txFromJSON","deposit","cancel","get_subscription","get_retention_fee","version","last_id","fee","token","validateRequired","value","paramName","TypeError","validateNumber","validateString","length","validateBigint","BigInt","error","Error","validateAccount","account","StrKey","isValidEd25519PublicKey","validateBalance","amount","validateOracleSymbol","oracleToken","source","asset","validateThreshold","Math","floor","validateHeartbeat","validateWebhook","startsWith","subtle","crypto","textEncoder","Uint8Array","TextEncoder","async","encrypt","rsaPublicKey","data","aesKey","getRandomValues","iv","encryptedData","name","importKey","normalizeData","aesKeyIV","set","encryptedAesKeyIv","res","byteLength","encode","ArrayBuffer","pk","encryptWebhookUrl","webhookUrl","publicEncryptionKey","format","usage","hash","importRSAKey","base64","binaryString","atob","bytes","i","charCodeAt","base64ToBytes","processSimulationErrors","tx","simulation","contractErrorMatch","exec","SubscriptionClient","params","publicKey","signTransaction","rpcUrl","networkPassphrase","Networks","PUBLIC","contractId","clientSettings","client","getSubscription","subscriptionId","validation","subscription_id","result","createSubscription","initialBalance","encryptedWebhook","new_subscription","signAndSend","amountToDeposit","from","getRetentionFee","getToken","getVersion","getFee","getLastId"],"sourceRoot":""}